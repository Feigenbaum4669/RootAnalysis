
#include <sstream>

#include "HTTWeightsMaker.h"
#include "HTTWeightHistograms.h"
#include "EventProxyHTT.h"

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
HTTWeightsMaker::HTTWeightsMaker(const std::string & aName):Analyzer(aName){

}
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
HTTWeightsMaker::~HTTWeightsMaker(){

  delete hPU;
  delete puFile;

  if(myHistos_) delete myHistos_;

}
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
void HTTWeightsMaker::initialize(TFileDirectory& aDir,
			    pat::strbitset *aSelections){

  mySelections_ = aSelections;

  std::string filePath = "/home/akalinow/scratch/CMS/HiggsCP/PlotsAndTables/PileUp/ObservedPileup.root";
  puFile = new TFile(filePath.c_str());  
  hPU = (TH1F*)puFile->Get("hPU");
  hPU->SetName("hPU");
  hPU->Scale(1.0/hPU->Integral(0,hPU->GetNbinsX()+1));
  
  ///The histograms for this analyzer will be saved into "TestHistos"
  ///directory of the ROOT file
  myHistos_ = new HTTWeightHistograms(&aDir, selectionFlavours_);
  
}
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
void HTTWeightsMaker::finalize(){ 

  myHistos_->finalizeHistograms(0,1.0);
 
}
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
bool HTTWeightsMaker::analyze(const EventProxyBase& iEvent){

  const EventProxyHTT & myEventProxy = static_cast<const EventProxyHTT&>(iEvent);

  float weight = 1.0;
  std::string sampleName = "Test";
  myHistos_->fill1DHistogram("h1DNPV"+sampleName,myEventProxy.npv,weight);

  puWeight = 1.0;
  
  return true;
}
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
void HTTWeightsMaker::addBranch(TTree *tree){

  tree->Branch("PUWeight",&puWeight);
  
}
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
